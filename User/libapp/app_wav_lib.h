/*
*********************************************************************************************************
*
*	模块名称 : WAV播放应用头文件
*	文件名称 : app_wav_lib.h
*	版    本 : V1.0
*	说    明 : WAV软解的实现，WAV相对比较简单，除了头文件，剩下的就是音频数据。
*              1. 函数LoadWavHead和DumpWavHead用于WAV文件的解析。
*              2. WavMusicPlay的实现是基于RTX操作系统的。
*              3. 支持上一曲，下一曲，快进和快退，常用的采样率都支持，单声道和立体声也都支持。
*                 当前仅支持16位音频，如果是24位的WAV会被转换成16位进行播放。
*              4. 仅g_tWav是全局变量，其余都是使用局部变量和动态内存。
*
*	修改记录 :
*		版本号    日期         作者         说明
*       V1.0    2016-02-16   Eric2013       首发
*
*	Copyright (C), 2015-2020, 安富莱电子 www.armfly.com
*
*********************************************************************************************************
*/
#ifndef _APP_WAV_LIB_H_
#define _APP_WAV_LIB_H_


/*
*********************************************************************************************************
    WAVE文件作为多媒体中使用的声波文件格式之一，它是以RIFF格式为标准的。RIFF是英文Resource Interchange 
File Format的缩写，每个WAVE文件的头四个字节便是“RIFF”。
    WAVE文件是由若干个Chunk组成的。按照在文件中的出现位置包括：RIFF WAVE Chunk, Format Chunk, Fact Chunk
(可选), Data Chunk。具体见下图：

		------------------------------------------------
		|             RIFF WAVE Chunk                  |
		|             ID  = 'RIFF'                     |
		|             RiffType = 'WAVE'                |
		------------------------------------------------
		|             Format Chunk                     |
		|             ID = 'fmt '                      |
		------------------------------------------------
		|             Fact Chunk(optional)             |
		|             ID = 'fact'                      |
		------------------------------------------------
		|             Data Chunk                       |
		|             ID = 'data'                      |
		------------------------------------------------
					 Wav格式包含Chunk示例

    其中除了Fact Chunk外，其他三个Chunk是必须的。每个Chunk有各自的ID，位于Chunk最开始位置，作为标示，而且
均为4个字节。并且紧跟在ID后面的是Chunk大小（去除ID和Size所占的字节数后剩下的其他字节数目），4个字节表示，
低字节表示数值低位，高字节表示数值高位。下面具体介绍各个Chunk内容。
*********************************************************************************************************
*/

/*
*********************************************************************************************************
1. RIFF WAVE Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'RIFF'    |
    ----------------------------------
    | Size  |  4 Bytes |             |
    ----------------------------------
    | Type  |  4 Bytes |   'WAVE'    |
    ----------------------------------
	
	以'FIFF'作为标示，然后紧跟着为size字段，该size是整个wav文件大小减去ID和Size所占用的字节数，
即FileLen - 8 = Size。然后是Type字段，为'WAVE'，表示是wav文件。
*********************************************************************************************************
*/
/* 添加__packed关键字表示结构体成员间紧密排列 */
__packed typedef struct 
{ 
	uint8_t   ucRiffID[4];
	uint32_t  uiSize;
	uint8_t   ucWaveID[4];
}RiffHead_T;

/*
*********************************************************************************************************
2. Format Chunk
    ====================================================================
    |               |   字节数  |              具体内容                |
    ====================================================================
    | ID            |  4 Bytes  |   'fmt '                             |
    --------------------------------------------------------------------
    | Size          |  4 Bytes  | 数值为16或18，18则最后又附加信息     |
    --------------------------------------------------------------------  ----
    | FormatTag     |  2 Bytes  | 编码方式，一般为0x0001               |     |
    --------------------------------------------------------------------     |
    | Channels      |  2 Bytes  | 声道数目，1--单声道；2--双声道       |     |
    --------------------------------------------------------------------     |
    | SamplesPerSec |  4 Bytes  | 采样频率                             |     |
    --------------------------------------------------------------------     |
    | AvgBytesPerSec|  4 Bytes  | 每秒所需字节数                       |     |===> WAVE_FORMAT
    --------------------------------------------------------------------     |
    | BlockAlign    |  2 Bytes  | 数据块对齐单位(每个采样需要的字节数) |     |
    --------------------------------------------------------------------     |
    | BitsPerSample |  2 Bytes  | 每个采样需要的bit数                  |     |
    --------------------------------------------------------------------     |
    |               |  2 Bytes  | 附加信息（可选，通过Size来判断有无） |     |
    --------------------------------------------------------------------  ----
	
	以'fmt '作为标示。一般情况下Size为16，此时最后附加信息没有；如果为18则最后多了2个字节的附加信息。
主要由一些软件制成的wav格式中含有该2个字节的.
*********************************************************************************************************
*/
__packed typedef struct 
{ 
	uint8_t   ucFmtID[4]; 
	uint32_t  uiSize; 
	uint16_t  usFormatTag; 
	uint16_t  usChannels;
	uint32_t  uiSamplePerSec;
	uint32_t  uiAvgBytesPerSec;
	uint16_t  usBlockAlign;
	uint16_t  usBitsPerSample;
	uint8_t   ucAddtional[2];
}FmtChunk_T;

/*
*********************************************************************************************************
3. Fact Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'fact'    |
    ----------------------------------
    | Size  |  4 Bytes |   数值为4   |
    ----------------------------------
    | data  |  4 Bytes |             |
    ----------------------------------

	Fact Chunk是可选字段，一般当wav文件由某些软件转化而成，则包含该Chunk。
*********************************************************************************************************
*/
__packed  typedef struct   
{ 
	uint8_t  ucFactID[4];
	uint32_t uiFactSize; 
}FactBlock_T;

/*
*********************************************************************************************************
4. Data Chunk
    ==================================
    |       |所占字节数|  具体内容   |
    ==================================
    | ID    |  4 Bytes |   'data'    |
    ----------------------------------
    | Size  |  4 Bytes |             |
    ----------------------------------
    | data  |          |             |
    ----------------------------------

    Data Chunk是真正保存wav数据的地方，以'data'作为该Chunk的标示。然后是数据的大小。紧接着就是wav数据。
根据Format Chunk中的声道数以及采样bit数，wav数据的bit位置可以分成以下几种形式：

    ---------------------------------------------------------------------
    |   单声道  |    取样1    |    取样2    |    取样3    |    取样4    |
    |           |--------------------------------------------------------
    |  8bit量化 |    声道0    |    声道0    |    声道0    |    声道0    |
    ---------------------------------------------------------------------
    |   双声道  |          取样1            |           取样2           |
    |           |--------------------------------------------------------
    |  8bit量化 |  声道0(左)  |  声道1(右)  |  声道0(左)  |  声道1(右)  |
    ---------------------------------------------------------------------
    |           |          取样1            |           取样2           |
    |   单声道  |--------------------------------------------------------
    | 16bit量化 |    声道0    |  声道0      |    声道0    |  声道0      |
    |           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
    ---------------------------------------------------------------------
    |           |                         取样1                         |
    |   双声道  |--------------------------------------------------------
    | 16bit量化 |  声道0(左)  |  声道0(左)  |  声道1(右)  |  声道1(右)  |
    |           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
    ---------------------------------------------------------------------

*********************************************************************************************************
*/
__packed  typedef struct  
{ 
	uint8_t  ucDataID[4];
	uint32_t uiDataSize; 
}DataBlock_T; 


/* WAV文件头定义 */
typedef struct 
{
	FmtChunk_T  tFmt;
	DataBlock_T tData;
	uint32_t    uiDataOffset;
}WavHead_T;

/* 供外部文件调用的函数 */
void WavMusicPlay(const char *filename);
uint32_t GetWavRuntime(uint8_t *_pPath, uint32_t *uiTotalTime);
uint32_t GetWavInfo(uint8_t *_pPath);
#endif

/***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
